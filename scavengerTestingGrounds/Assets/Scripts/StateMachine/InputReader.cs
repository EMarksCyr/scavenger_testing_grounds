using System;
using UnityEngine;
using UnityEngine.InputSystem;

public class InputReader : MonoBehaviour, Controls.IPlayerActions //inherits monobehaviour it's attached specifically to the player and implements the IplayerActions interface generated by controls.cs
{
    public Vector2 MouseDelta;
    public Vector2 MoveComposite;

    public Action OnDashPerformed;
    public Action OnMainAttackPerformed;

    private Controls controls;

    private void OnEnable() //called when the gameobject this script is attached to is enabled, for the player this is when the game is run so effectively it calls right after Awake()
    {
        if (controls != null)
            return;

        controls = new Controls(); //creates an instance of the Control class based on control.inputactions and the player action map
        controls.Player.SetCallbacks(this);
        controls.Player.Enable();
    }

    public void OnDisable()
    {
        controls.Player.Disable();
    }


    public void OnMove(InputAction.CallbackContext context) //whenever an input bound for the Move action is registered we call the OnMove function
    {
        MoveComposite = context.ReadValue<Vector2>(); //defines the input reader clas as a vector 2 type MoveComposite member
        //Movecomposite looks for any change from current position on x or y axis 
    }

    public void OnDash(InputAction.CallbackContext context) //OnDash() is called any time the context event (any input bound) occurs 
    {
        if (!context.performed) //makes sure that the event isn't triggered twice, once when the button is pressed and once when released 
            return;

        OnDashPerformed?.Invoke(); //? is a null condition operator to just skip invoke() if there's no handler registered for the function
    }

    public void OnMainAttack(InputAction.CallbackContext context)
    {
        Debug.Log("STEWART: Input OnMainAttack callback");
        if (!context.performed)
            return;

        OnMainAttackPerformed?.Invoke(); //omitting '?' while debugging
    }

    /**
     * True if the button was pressed down at any point during this frame
     */
    public bool IsMainAttackActionTriggered()
    {
        return controls.Player.MainAttack.triggered;
    }
}